{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar _a;\n\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\n\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n\n(function (DeviceModelId) {\n  DeviceModelId[\"blue\"] = \"blue\";\n  DeviceModelId[\"nanoS\"] = \"nanoS\";\n  DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n  DeviceModelId[\"nanoX\"] = \"nanoX\";\n})(DeviceModelId || (DeviceModelId = {}));\n\nvar devices = (_a = {}, _a[DeviceModelId.blue] = {\n  id: DeviceModelId.blue,\n  productName: \"Ledger Blue\",\n  productIdMM: 0x00,\n  legacyUsbProductId: 0x0000,\n  usbOnly: true,\n  memorySize: 480 * 1024,\n  masks: [0x31000000, 0x31010000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  }\n}, _a[DeviceModelId.nanoS] = {\n  id: DeviceModelId.nanoS,\n  productName: \"Ledger Nano S\",\n  productIdMM: 0x10,\n  legacyUsbProductId: 0x0001,\n  usbOnly: true,\n  memorySize: 320 * 1024,\n  masks: [0x31100000],\n  getBlockSize: function (firmwareVersion) {\n    var _a;\n\n    return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\") ? 4 * 1024 : 2 * 1024;\n  }\n}, _a[DeviceModelId.nanoSP] = {\n  id: DeviceModelId.nanoSP,\n  productName: \"Ledger Nano SP\",\n  productIdMM: 0x50,\n  legacyUsbProductId: 0x0005,\n  usbOnly: true,\n  memorySize: 1533 * 1024,\n  masks: [0x33100000],\n  getBlockSize: function (_firmwareVersion) {\n    return 512;\n  }\n}, _a[DeviceModelId.nanoX] = {\n  id: DeviceModelId.nanoX,\n  productName: \"Ledger Nano X\",\n  productIdMM: 0x40,\n  legacyUsbProductId: 0x0004,\n  usbOnly: false,\n  memorySize: 2 * 1024 * 1024,\n  masks: [0x33000000],\n  getBlockSize: function (_firwareVersion) {\n    return 4 * 1024;\n  },\n  bluetoothSpec: [{\n    // this is the legacy one (prototype version). we will eventually drop it.\n    serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n    notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n    writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\"\n  }, {\n    serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n    notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n    writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\"\n  }]\n}, _a);\nvar productMap = {\n  Blue: DeviceModelId.blue,\n  \"Nano S\": DeviceModelId.nanoS,\n  \"Nano X\": DeviceModelId.nanoX\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */\n\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\n\nexport var getDeviceModel = function (id) {\n  var info = devices[id];\n  if (!info) throw new Error(\"device '\" + id + \"' does not exist\");\n  return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\n\nexport var identifyTargetId = function (targetId) {\n  var deviceModel = devicesList.find(function (_a) {\n    var masks = _a.masks;\n    return masks.find(function (mask) {\n      return (targetId & 0xffff0000) === mask;\n    });\n  });\n  return deviceModel;\n};\n/**\n *\n */\n\nexport var identifyUSBProductId = function (usbProductId) {\n  var legacy = devicesList.find(function (d) {\n    return d.legacyUsbProductId === usbProductId;\n  });\n  if (legacy) return legacy;\n  var mm = usbProductId >> 8;\n  var deviceModel = devicesList.find(function (d) {\n    return d.productIdMM === mm;\n  });\n  return deviceModel;\n};\nexport var identifyProductName = function (productName) {\n  var productId = productMap[productName];\n\n  if (!productId && productName.startsWith(\"Nano S\")) {\n    productId = DeviceModelId.nanoSP;\n  }\n\n  var deviceModel = devicesList.find(function (d) {\n    return d.id === productId;\n  });\n  return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\n\nfor (var id in devices) {\n  var deviceModel = devices[id];\n  var bluetoothSpec = deviceModel.bluetoothSpec;\n\n  if (bluetoothSpec) {\n    for (var i = 0; i < bluetoothSpec.length; i++) {\n      var spec = bluetoothSpec[i];\n      bluetoothServices.push(spec.serviceUuid);\n      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({\n        deviceModel: deviceModel\n      }, spec);\n    }\n  }\n}\n/**\n *\n */\n\n\nexport var getBluetoothServiceUuids = function () {\n  return bluetoothServices;\n};\n/**\n *\n */\n\nexport var getInfosForServiceUuid = function (uuid) {\n  return serviceUuidToInfos[uuid.toLowerCase()];\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a;\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n(function (DeviceModelId) {\n    DeviceModelId[\"blue\"] = \"blue\";\n    DeviceModelId[\"nanoS\"] = \"nanoS\";\n    DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n    DeviceModelId[\"nanoX\"] = \"nanoX\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {},\n    _a[DeviceModelId.blue] = {\n        id: DeviceModelId.blue,\n        productName: \"Ledger Blue\",\n        productIdMM: 0x00,\n        legacyUsbProductId: 0x0000,\n        usbOnly: true,\n        memorySize: 480 * 1024,\n        masks: [0x31000000, 0x31010000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; }\n    },\n    _a[DeviceModelId.nanoS] = {\n        id: DeviceModelId.nanoS,\n        productName: \"Ledger Nano S\",\n        productIdMM: 0x10,\n        legacyUsbProductId: 0x0001,\n        usbOnly: true,\n        memorySize: 320 * 1024,\n        masks: [0x31100000],\n        getBlockSize: function (firmwareVersion) {\n            var _a;\n            return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\")\n                ? 4 * 1024\n                : 2 * 1024;\n        }\n    },\n    _a[DeviceModelId.nanoSP] = {\n        id: DeviceModelId.nanoSP,\n        productName: \"Ledger Nano SP\",\n        productIdMM: 0x50,\n        legacyUsbProductId: 0x0005,\n        usbOnly: true,\n        memorySize: 1533 * 1024,\n        masks: [0x33100000],\n        getBlockSize: function (_firmwareVersion) { return 512; }\n    },\n    _a[DeviceModelId.nanoX] = {\n        id: DeviceModelId.nanoX,\n        productName: \"Ledger Nano X\",\n        productIdMM: 0x40,\n        legacyUsbProductId: 0x0004,\n        usbOnly: false,\n        memorySize: 2 * 1024 * 1024,\n        masks: [0x33000000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; },\n        bluetoothSpec: [\n            {\n                // this is the legacy one (prototype version). we will eventually drop it.\n                serviceUuid: \"d973f2e0-b19e-11e2-9e96-0800200c9a66\",\n                notifyUuid: \"d973f2e1-b19e-11e2-9e96-0800200c9a66\",\n                writeUuid: \"d973f2e2-b19e-11e2-9e96-0800200c9a66\"\n            },\n            {\n                serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n                notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n                writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\"\n            },\n        ]\n    },\n    _a);\nvar productMap = {\n    Blue: DeviceModelId.blue,\n    \"Nano S\": DeviceModelId.nanoS,\n    \"Nano X\": DeviceModelId.nanoX\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\nexport var getDeviceModel = function (id) {\n    var info = devices[id];\n    if (!info)\n        throw new Error(\"device '\" + id + \"' does not exist\");\n    return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport var identifyTargetId = function (targetId) {\n    var deviceModel = devicesList.find(function (_a) {\n        var masks = _a.masks;\n        return masks.find(function (mask) { return (targetId & 0xffff0000) === mask; });\n    });\n    return deviceModel;\n};\n/**\n *\n */\nexport var identifyUSBProductId = function (usbProductId) {\n    var legacy = devicesList.find(function (d) { return d.legacyUsbProductId === usbProductId; });\n    if (legacy)\n        return legacy;\n    var mm = usbProductId >> 8;\n    var deviceModel = devicesList.find(function (d) { return d.productIdMM === mm; });\n    return deviceModel;\n};\nexport var identifyProductName = function (productName) {\n    var productId = productMap[productName];\n    if (!productId && productName.startsWith(\"Nano S\")) {\n        productId = DeviceModelId.nanoSP;\n    }\n    var deviceModel = devicesList.find(function (d) { return d.id === productId; });\n    return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor (var id in devices) {\n    var deviceModel = devices[id];\n    var bluetoothSpec = deviceModel.bluetoothSpec;\n    if (bluetoothSpec) {\n        for (var i = 0; i < bluetoothSpec.length; i++) {\n            var spec = bluetoothSpec[i];\n            bluetoothServices.push(spec.serviceUuid);\n            serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({ deviceModel: deviceModel }, spec);\n        }\n    }\n}\n/**\n *\n */\nexport var getBluetoothServiceUuids = function () { return bluetoothServices; };\n/**\n *\n */\nexport var getInfosForServiceUuid = function (uuid) { return serviceUuidToInfos[uuid.toLowerCase()]; };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}