{"ast":null,"code":"var _jsxFileName = \"/home/kubuntu/react-demo/src/Wallet.tsx\",\n    _s = $RefreshSig$();\n\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { getLedgerWallet, getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolletWallet, getSolletExtensionWallet, getTorusWallet } from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport React, { useCallback, useMemo } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Navigation from './Navigation';\nimport Notification from './Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wallet = () => {\n  _s();\n\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]); // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n  // Only the wallets you want to support will be compiled into your application\n\n  const wallets = useMemo(() => [getPhantomWallet(), getSlopeWallet(), getSolflareWallet(), getTorusWallet({\n    options: {\n      clientId: 'Get a client ID @ https://developer.tor.us'\n    }\n  }), getLedgerWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  })], [network]);\n  const onError = useCallback(error => toast.custom( /*#__PURE__*/_jsxDEV(Notification, {\n    message: error.message ? `${error.name}: ${error.message}` : error.name,\n    variant: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 17\n  }, this)), []);\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      onError: onError,\n      autoConnect: true,\n      children: [/*#__PURE__*/_jsxDEV(WalletModalProvider, {\n        children: /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Toaster, {\n        position: \"bottom-left\",\n        reverseOrder: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Wallet, \"d0lP12HGMx9seVZpfPNa1u9wI+8=\");\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/home/kubuntu/react-demo/src/Wallet.tsx"],"names":["WalletAdapterNetwork","ConnectionProvider","WalletProvider","WalletModalProvider","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getTorusWallet","clusterApiUrl","React","useCallback","useMemo","toast","Toaster","Navigation","Notification","Wallet","network","Devnet","endpoint","wallets","options","clientId","onError","error","custom","message","name"],"mappings":";;;AAAA,SAASA,oBAAT,QAAkD,6BAAlD;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,8BAAnD;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SACIC,eADJ,EAEIC,gBAFJ,EAGIC,cAHJ,EAIIC,iBAJJ,EAKIC,eALJ,EAMIC,wBANJ,EAOIC,cAPJ,QAQO,gCARP;AASA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,KAAP,IAAoBC,WAApB,EAAiCC,OAAjC,QAAgD,OAAhD;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,iBAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,MAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,OAAO,GAAGpB,oBAAoB,CAACqB,MAArC;AACA,QAAMC,QAAQ,GAAGR,OAAO,CAAC,MAAMH,aAAa,CAACS,OAAD,CAApB,EAA+B,CAACA,OAAD,CAA/B,CAAxB,CAFqB,CAIrB;AACA;;AACA,QAAMG,OAAO,GAAGT,OAAO,CACnB,MAAM,CACFT,gBAAgB,EADd,EAEFC,cAAc,EAFZ,EAGFC,iBAAiB,EAHf,EAIFG,cAAc,CAAC;AACXc,IAAAA,OAAO,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AADE,GAAD,CAJZ,EAOFrB,eAAe,EAPb,EAQFI,eAAe,CAAC;AAAEY,IAAAA;AAAF,GAAD,CARb,EASFX,wBAAwB,CAAC;AAAEW,IAAAA;AAAF,GAAD,CATtB,CADa,EAYnB,CAACA,OAAD,CAZmB,CAAvB;AAeA,QAAMM,OAAO,GAAGb,WAAW,CACtBc,KAAD,IACIZ,KAAK,CAACa,MAAN,eACI,QAAC,YAAD;AACI,IAAA,OAAO,EAAED,KAAK,CAACE,OAAN,GAAiB,GAAEF,KAAK,CAACG,IAAK,KAAIH,KAAK,CAACE,OAAQ,EAAhD,GAAoDF,KAAK,CAACG,IADvE;AAEI,IAAA,OAAO,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,UADJ,CAFmB,EAQvB,EARuB,CAA3B;AAWA,sBACI,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAER,QAA9B;AAAA,2BACI,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEC,OAAzB;AAAkC,MAAA,OAAO,EAAEG,OAA3C;AAAoD,MAAA,WAAW,MAA/D;AAAA,8BACI,QAAC,mBAAD;AAAA,+BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,aAAlB;AAAgC,QAAA,YAAY,EAAE;AAA9C;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA1CD;;GAAMP,M;;KAAAA,M;AA4CN,eAAeA,MAAf","sourcesContent":["import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport {\n    getLedgerWallet,\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport React, { FC, useCallback, useMemo } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Navigation from './Navigation';\nimport Notification from './Notification';\n\nconst Wallet: FC = () => {\n    const network = WalletAdapterNetwork.Devnet;\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n    // Only the wallets you want to support will be compiled into your application\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getTorusWallet({\n                options: { clientId: 'Get a client ID @ https://developer.tor.us' },\n            }),\n            getLedgerWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n        ],\n        [network]\n    );\n\n    const onError = useCallback(\n        (error: WalletError) =>\n            toast.custom(\n                <Notification\n                    message={error.message ? `${error.name}: ${error.message}` : error.name}\n                    variant=\"error\"\n                />\n            ),\n        []\n    );\n\n    return (\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} onError={onError} autoConnect>\n                <WalletModalProvider>\n                    <Navigation />\n                </WalletModalProvider>\n                <Toaster position=\"bottom-left\" reverseOrder={false} />\n            </WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}