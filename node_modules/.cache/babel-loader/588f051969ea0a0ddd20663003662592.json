{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false\n};\nexport const WalletProvider = ({\n  children,\n  wallets,\n  autoConnect = false,\n  onError = error => console.error(error),\n  localStorageKey = 'walletName'\n}) => {\n  const [name, setName] = useLocalStorage(localStorageKey, null);\n  const [{\n    wallet,\n    adapter,\n    ready,\n    publicKey,\n    connected\n  }, setState] = useState(initialState);\n  const [connecting, setConnecting] = useState(false);\n  const [disconnecting, setDisconnecting] = useState(false);\n  const isConnecting = useRef(false);\n  const isDisconnecting = useRef(false); // Map of wallet names to wallets\n\n  const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n    walletsByName[wallet.name] = wallet;\n    return walletsByName;\n  }, {}), [wallets]); // When the selected wallet changes, initialize the state\n\n  useEffect(() => {\n    const wallet = name && walletsByName[name] || null;\n    const adapter = wallet && wallet.adapter();\n\n    if (adapter) {\n      const {\n        ready,\n        publicKey,\n        connected\n      } = adapter;\n      setState({\n        wallet,\n        adapter,\n        connected,\n        publicKey,\n        ready\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(() => {\n    if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready) return;\n\n    (function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        isConnecting.current = true;\n        setConnecting(true);\n\n        try {\n          yield adapter.connect();\n        } catch (error) {\n          // Clear the selected wallet\n          setName(null); // Don't throw error, but onError will still be called\n        } finally {\n          setConnecting(false);\n          isConnecting.current = false;\n        }\n      });\n    })();\n  }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]); // Select a wallet by name\n\n  const select = useCallback(newName => __awaiter(void 0, void 0, void 0, function* () {\n    if (name === newName) return;\n    if (adapter) yield adapter.disconnect();\n    setName(newName);\n  }), [name, adapter, setName]); // Handle the adapter's ready event\n\n  const onReady = useCallback(() => setState(state => Object.assign(Object.assign({}, state), {\n    ready: true\n  })), [setState]); // Handle the adapter's connect event\n\n  const onConnect = useCallback(() => {\n    if (!adapter) return;\n    const {\n      connected,\n      publicKey,\n      ready\n    } = adapter;\n    setState(state => Object.assign(Object.assign({}, state), {\n      connected,\n      publicKey,\n      ready\n    }));\n  }, [adapter, setState]); // Handle the adapter's disconnect event\n\n  const onDisconnect = useCallback(() => setName(null), [setName]); // Connect the adapter to the wallet\n\n  const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (isConnecting.current || connecting || disconnecting || connected) return;\n\n    if (!wallet || !adapter) {\n      const error = new WalletNotSelectedError();\n      onError(error);\n      throw error;\n    }\n\n    if (!ready) {\n      setName(null);\n\n      if (typeof window !== 'undefined') {\n        window.open(wallet.url, '_blank');\n      }\n\n      const error = new WalletNotReadyError();\n      onError(error);\n      throw error;\n    }\n\n    isConnecting.current = true;\n    setConnecting(true);\n\n    try {\n      yield adapter.connect();\n    } catch (error) {\n      setName(null);\n      throw error;\n    } finally {\n      setConnecting(false);\n      isConnecting.current = false;\n    }\n  }), [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]); // Disconnect the adapter from the wallet\n\n  const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (isDisconnecting.current || disconnecting) return;\n    if (!adapter) return setName(null);\n    isDisconnecting.current = true;\n    setDisconnecting(true);\n\n    try {\n      yield adapter.disconnect();\n    } finally {\n      setName(null);\n      setDisconnecting(false);\n      isDisconnecting.current = false;\n    }\n  }), [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]); // Send a transaction using the provided connection\n\n  const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!adapter) {\n      const error = new WalletNotSelectedError();\n      onError(error);\n      throw error;\n    }\n\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.sendTransaction(transaction, connection, options);\n  }), [adapter, onError, connected]); // Sign a transaction if the wallet supports it\n\n  const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter ? transaction => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signTransaction(transaction);\n  }) : undefined, [adapter, onError, connected]); // Sign multiple transactions if the wallet supports it\n\n  const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter ? transactions => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signAllTransactions(transactions);\n  }) : undefined, [adapter, onError, connected]); // Sign an arbitrary message if the wallet supports it\n\n  const signMessage = useMemo(() => adapter && 'signMessage' in adapter ? message => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signMessage(message);\n  }) : undefined, [adapter, onError, connected]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(() => {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return () => {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets,\n      autoConnect,\n      wallet,\n      adapter,\n      publicKey,\n      ready,\n      connected,\n      connecting,\n      disconnecting,\n      select,\n      connect,\n      disconnect,\n      sendTransaction,\n      signTransaction,\n      signAllTransactions,\n      signMessage\n    }\n  }, children);\n};","map":{"version":3,"sources":["../src/WalletProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { WalletNotConnectedError, WalletNotReadyError, } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n    wallet: null,\n    adapter: null,\n    ready: false,\n    publicKey: null,\n    connected: false,\n};\nexport const WalletProvider = ({ children, wallets, autoConnect = false, onError = (error) => console.error(error), localStorageKey = 'walletName', }) => {\n    const [name, setName] = useLocalStorage(localStorageKey, null);\n    const [{ wallet, adapter, ready, publicKey, connected }, setState] = useState(initialState);\n    const [connecting, setConnecting] = useState(false);\n    const [disconnecting, setDisconnecting] = useState(false);\n    const isConnecting = useRef(false);\n    const isDisconnecting = useRef(false);\n    // Map of wallet names to wallets\n    const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n        walletsByName[wallet.name] = wallet;\n        return walletsByName;\n    }, {}), [wallets]);\n    // When the selected wallet changes, initialize the state\n    useEffect(() => {\n        const wallet = (name && walletsByName[name]) || null;\n        const adapter = wallet && wallet.adapter();\n        if (adapter) {\n            const { ready, publicKey, connected } = adapter;\n            setState({ wallet, adapter, connected, publicKey, ready });\n        }\n        else {\n            setState(initialState);\n        }\n    }, [name, walletsByName, setState]);\n    // If autoConnect is enabled, try to connect when the adapter changes and is ready\n    useEffect(() => {\n        if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready)\n            return;\n        (function () {\n            return __awaiter(this, void 0, void 0, function* () {\n                isConnecting.current = true;\n                setConnecting(true);\n                try {\n                    yield adapter.connect();\n                }\n                catch (error) {\n                    // Clear the selected wallet\n                    setName(null);\n                    // Don't throw error, but onError will still be called\n                }\n                finally {\n                    setConnecting(false);\n                    isConnecting.current = false;\n                }\n            });\n        })();\n    }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]);\n    // Select a wallet by name\n    const select = useCallback((newName) => __awaiter(void 0, void 0, void 0, function* () {\n        if (name === newName)\n            return;\n        if (adapter)\n            yield adapter.disconnect();\n        setName(newName);\n    }), [name, adapter, setName]);\n    // Handle the adapter's ready event\n    const onReady = useCallback(() => setState((state) => (Object.assign(Object.assign({}, state), { ready: true }))), [setState]);\n    // Handle the adapter's connect event\n    const onConnect = useCallback(() => {\n        if (!adapter)\n            return;\n        const { connected, publicKey, ready } = adapter;\n        setState((state) => (Object.assign(Object.assign({}, state), { connected,\n            publicKey,\n            ready })));\n    }, [adapter, setState]);\n    // Handle the adapter's disconnect event\n    const onDisconnect = useCallback(() => setName(null), [setName]);\n    // Connect the adapter to the wallet\n    const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isConnecting.current || connecting || disconnecting || connected)\n            return;\n        if (!wallet || !adapter) {\n            const error = new WalletNotSelectedError();\n            onError(error);\n            throw error;\n        }\n        if (!ready) {\n            setName(null);\n            if (typeof window !== 'undefined') {\n                window.open(wallet.url, '_blank');\n            }\n            const error = new WalletNotReadyError();\n            onError(error);\n            throw error;\n        }\n        isConnecting.current = true;\n        setConnecting(true);\n        try {\n            yield adapter.connect();\n        }\n        catch (error) {\n            setName(null);\n            throw error;\n        }\n        finally {\n            setConnecting(false);\n            isConnecting.current = false;\n        }\n    }), [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]);\n    // Disconnect the adapter from the wallet\n    const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isDisconnecting.current || disconnecting)\n            return;\n        if (!adapter)\n            return setName(null);\n        isDisconnecting.current = true;\n        setDisconnecting(true);\n        try {\n            yield adapter.disconnect();\n        }\n        finally {\n            setName(null);\n            setDisconnecting(false);\n            isDisconnecting.current = false;\n        }\n    }), [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]);\n    // Send a transaction using the provided connection\n    const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!adapter) {\n            const error = new WalletNotSelectedError();\n            onError(error);\n            throw error;\n        }\n        if (!connected) {\n            const error = new WalletNotConnectedError();\n            onError(error);\n            throw error;\n        }\n        return yield adapter.sendTransaction(transaction, connection, options);\n    }), [adapter, onError, connected]);\n    // Sign a transaction if the wallet supports it\n    const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter\n        ? (transaction) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected) {\n                const error = new WalletNotConnectedError();\n                onError(error);\n                throw error;\n            }\n            return yield adapter.signTransaction(transaction);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign multiple transactions if the wallet supports it\n    const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter\n        ? (transactions) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected) {\n                const error = new WalletNotConnectedError();\n                onError(error);\n                throw error;\n            }\n            return yield adapter.signAllTransactions(transactions);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign an arbitrary message if the wallet supports it\n    const signMessage = useMemo(() => adapter && 'signMessage' in adapter\n        ? (message) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected) {\n                const error = new WalletNotConnectedError();\n                onError(error);\n                throw error;\n            }\n            return yield adapter.signMessage(message);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Setup and teardown event listeners when the adapter changes\n    useEffect(() => {\n        if (adapter) {\n            adapter.on('ready', onReady);\n            adapter.on('connect', onConnect);\n            adapter.on('disconnect', onDisconnect);\n            adapter.on('error', onError);\n            return () => {\n                adapter.off('ready', onReady);\n                adapter.off('connect', onConnect);\n                adapter.off('disconnect', onDisconnect);\n                adapter.off('error', onError);\n            };\n        }\n    }, [adapter, onReady, onConnect, onDisconnect, onError]);\n    return (React.createElement(WalletContext.Provider, { value: {\n            wallets,\n            autoConnect,\n            wallet,\n            adapter,\n            publicKey,\n            ready,\n            connected,\n            connecting,\n            disconnecting,\n            select,\n            connect,\n            disconnect,\n            sendTransaction,\n            signTransaction,\n            signAllTransactions,\n            signMessage,\n        } }, children));\n};\n//# sourceMappingURL=WalletProvider.js.map"]},"metadata":{},"sourceType":"module"}