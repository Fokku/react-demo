{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError } from \"@ledgerhq/errors\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\n\nvar Transport =\n/** @class */\nfunction () {\n  function Transport() {\n    var _this = this;\n\n    this.exchangeTimeout = 30000;\n    this.unresponsiveTimeout = 15000;\n    this.deviceModel = null;\n    this._events = new EventEmitter();\n    /**\n     * wrapper on top of exchange to simplify work of the implementation.\n     * @param cla\n     * @param ins\n     * @param p1\n     * @param p2\n     * @param data\n     * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n     * @return a Promise of response buffer\n     */\n\n    this.send = function (cla, ins, p1, p2, data, statusList) {\n      if (data === void 0) {\n        data = Buffer.alloc(0);\n      }\n\n      if (statusList === void 0) {\n        statusList = [StatusCodes.OK];\n      }\n\n      return __awaiter(_this, void 0, void 0, function () {\n        var response, sw;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (data.length >= 256) {\n                throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n              }\n\n              return [4\n              /*yield*/\n              , this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]))];\n\n            case 1:\n              response = _a.sent();\n              sw = response.readUInt16BE(response.length - 2);\n\n              if (!statusList.some(function (s) {\n                return s === sw;\n              })) {\n                throw new TransportStatusError(sw);\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    };\n\n    this.exchangeAtomicImpl = function (f) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var resolveBusy, busyPromise, unresponsiveReached, timeout, res;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (this.exchangeBusyPromise) {\n                throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n              }\n\n              busyPromise = new Promise(function (r) {\n                resolveBusy = r;\n              });\n              this.exchangeBusyPromise = busyPromise;\n              unresponsiveReached = false;\n              timeout = setTimeout(function () {\n                unresponsiveReached = true;\n\n                _this.emit(\"unresponsive\");\n              }, this.unresponsiveTimeout);\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1,, 3, 4]);\n\n              return [4\n              /*yield*/\n              , f()];\n\n            case 2:\n              res = _a.sent();\n\n              if (unresponsiveReached) {\n                this.emit(\"responsive\");\n              }\n\n              return [2\n              /*return*/\n              , res];\n\n            case 3:\n              clearTimeout(timeout);\n              if (resolveBusy) resolveBusy();\n              this.exchangeBusyPromise = null;\n              return [7\n              /*endfinally*/\n              ];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    this._appAPIlock = null;\n  }\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n\n\n  Transport.prototype.exchange = function (_apdu) {\n    throw new Error(\"exchange not implemented\");\n  };\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n\n\n  Transport.prototype.setScrambleKey = function (_key) {};\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n\n\n  Transport.prototype.close = function () {\n    return Promise.resolve();\n  };\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n\n\n  Transport.prototype.on = function (eventName, cb) {\n    this._events.on(eventName, cb);\n  };\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n\n\n  Transport.prototype.off = function (eventName, cb) {\n    this._events.removeListener(eventName, cb);\n  };\n\n  Transport.prototype.emit = function (event) {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    (_a = this._events).emit.apply(_a, __spreadArray([event], __read(args), false));\n  };\n  /**\n   * Enable or not logs of the binary exchange\n   */\n\n\n  Transport.prototype.setDebugMode = function () {\n    console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n  };\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n\n\n  Transport.prototype.setExchangeTimeout = function (exchangeTimeout) {\n    this.exchangeTimeout = exchangeTimeout;\n  };\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n\n\n  Transport.prototype.setExchangeUnresponsiveTimeout = function (unresponsiveTimeout) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  };\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n\n\n  Transport.create = function (openTimeout, listenTimeout) {\n    var _this = this;\n\n    if (openTimeout === void 0) {\n      openTimeout = 3000;\n    }\n\n    return new Promise(function (resolve, reject) {\n      var found = false;\n\n      var sub = _this.listen({\n        next: function (e) {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n          _this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: function (e) {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: function () {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n          if (!found) {\n            reject(new TransportError(_this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n          }\n        }\n      });\n\n      var listenTimeoutId = listenTimeout ? setTimeout(function () {\n        sub.unsubscribe();\n        reject(new TransportError(_this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n      }, listenTimeout) : null;\n    });\n  };\n\n  Transport.prototype.decorateAppAPIMethods = function (self, methods, scrambleKey) {\n    var e_1, _a;\n\n    try {\n      for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {\n        var methodName = methods_1_1.value;\n        self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (methods_1_1 && !methods_1_1.done && (_a = methods_1[\"return\"])) _a.call(methods_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Transport.prototype.decorateAppAPIMethod = function (methodName, f, ctx, scrambleKey) {\n    var _this = this;\n\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return __awaiter(_this, void 0, void 0, function () {\n        var _appAPIlock;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _appAPIlock = this._appAPIlock;\n\n              if (_appAPIlock) {\n                return [2\n                /*return*/\n                , Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"))];\n              }\n\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1,, 3, 4]);\n\n              this._appAPIlock = methodName;\n              this.setScrambleKey(scrambleKey);\n              return [4\n              /*yield*/\n              , f.apply(ctx, args)];\n\n            case 2:\n              return [2\n              /*return*/\n              , _a.sent()];\n\n            case 3:\n              this._appAPIlock = null;\n              return [7\n              /*endfinally*/\n              ];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n  };\n\n  Transport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  Transport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n  return Transport;\n}();\n\nexport default Transport;","map":{"version":3,"sources":["../src/Transport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError, } from \"@ledgerhq/errors\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage, };\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nvar Transport = /** @class */ (function () {\n    function Transport() {\n        var _this = this;\n        this.exchangeTimeout = 30000;\n        this.unresponsiveTimeout = 15000;\n        this.deviceModel = null;\n        this._events = new EventEmitter();\n        /**\n         * wrapper on top of exchange to simplify work of the implementation.\n         * @param cla\n         * @param ins\n         * @param p1\n         * @param p2\n         * @param data\n         * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n         * @return a Promise of response buffer\n         */\n        this.send = function (cla, ins, p1, p2, data, statusList) {\n            if (data === void 0) { data = Buffer.alloc(0); }\n            if (statusList === void 0) { statusList = [StatusCodes.OK]; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var response, sw;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (data.length >= 256) {\n                                throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n                            }\n                            return [4 /*yield*/, this.exchange(Buffer.concat([\n                                    Buffer.from([cla, ins, p1, p2]),\n                                    Buffer.from([data.length]),\n                                    data,\n                                ]))];\n                        case 1:\n                            response = _a.sent();\n                            sw = response.readUInt16BE(response.length - 2);\n                            if (!statusList.some(function (s) { return s === sw; })) {\n                                throw new TransportStatusError(sw);\n                            }\n                            return [2 /*return*/, response];\n                    }\n                });\n            });\n        };\n        this.exchangeAtomicImpl = function (f) { return __awaiter(_this, void 0, void 0, function () {\n            var resolveBusy, busyPromise, unresponsiveReached, timeout, res;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.exchangeBusyPromise) {\n                            throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n                        }\n                        busyPromise = new Promise(function (r) {\n                            resolveBusy = r;\n                        });\n                        this.exchangeBusyPromise = busyPromise;\n                        unresponsiveReached = false;\n                        timeout = setTimeout(function () {\n                            unresponsiveReached = true;\n                            _this.emit(\"unresponsive\");\n                        }, this.unresponsiveTimeout);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 4]);\n                        return [4 /*yield*/, f()];\n                    case 2:\n                        res = _a.sent();\n                        if (unresponsiveReached) {\n                            this.emit(\"responsive\");\n                        }\n                        return [2 /*return*/, res];\n                    case 3:\n                        clearTimeout(timeout);\n                        if (resolveBusy)\n                            resolveBusy();\n                        this.exchangeBusyPromise = null;\n                        return [7 /*endfinally*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); };\n        this._appAPIlock = null;\n    }\n    /**\n     * low level api to communicate with the device\n     * This method is for implementations to implement but should not be directly called.\n     * Instead, the recommanded way is to use send() method\n     * @param apdu the data to send\n     * @return a Promise of response data\n     */\n    Transport.prototype.exchange = function (_apdu) {\n        throw new Error(\"exchange not implemented\");\n    };\n    /**\n     * set the \"scramble key\" for the next exchanges with the device.\n     * Each App can have a different scramble key and they internally will set it at instanciation.\n     * @param key the scramble key\n     */\n    Transport.prototype.setScrambleKey = function (_key) { };\n    /**\n     * close the exchange with the device.\n     * @return a Promise that ends when the transport is closed.\n     */\n    Transport.prototype.close = function () {\n        return Promise.resolve();\n    };\n    /**\n     * Listen to an event on an instance of transport.\n     * Transport implementation can have specific events. Here is the common events:\n     * * `\"disconnect\"` : triggered if Transport is disconnected\n     */\n    Transport.prototype.on = function (eventName, cb) {\n        this._events.on(eventName, cb);\n    };\n    /**\n     * Stop listening to an event on an instance of transport.\n     */\n    Transport.prototype.off = function (eventName, cb) {\n        this._events.removeListener(eventName, cb);\n    };\n    Transport.prototype.emit = function (event) {\n        var _a;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        (_a = this._events).emit.apply(_a, __spreadArray([event], __read(args), false));\n    };\n    /**\n     * Enable or not logs of the binary exchange\n     */\n    Transport.prototype.setDebugMode = function () {\n        console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    };\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */\n    Transport.prototype.setExchangeTimeout = function (exchangeTimeout) {\n        this.exchangeTimeout = exchangeTimeout;\n    };\n    /**\n     * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n     */\n    Transport.prototype.setExchangeUnresponsiveTimeout = function (unresponsiveTimeout) {\n        this.unresponsiveTimeout = unresponsiveTimeout;\n    };\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */\n    Transport.create = function (openTimeout, listenTimeout) {\n        var _this = this;\n        if (openTimeout === void 0) { openTimeout = 3000; }\n        return new Promise(function (resolve, reject) {\n            var found = false;\n            var sub = _this.listen({\n                next: function (e) {\n                    found = true;\n                    if (sub)\n                        sub.unsubscribe();\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    _this.open(e.descriptor, openTimeout).then(resolve, reject);\n                },\n                error: function (e) {\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    reject(e);\n                },\n                complete: function () {\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    if (!found) {\n                        reject(new TransportError(_this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n                    }\n                }\n            });\n            var listenTimeoutId = listenTimeout\n                ? setTimeout(function () {\n                    sub.unsubscribe();\n                    reject(new TransportError(_this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n                }, listenTimeout)\n                : null;\n        });\n    };\n    Transport.prototype.decorateAppAPIMethods = function (self, methods, scrambleKey) {\n        var e_1, _a;\n        try {\n            for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {\n                var methodName = methods_1_1.value;\n                self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (methods_1_1 && !methods_1_1.done && (_a = methods_1[\"return\"])) _a.call(methods_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Transport.prototype.decorateAppAPIMethod = function (methodName, f, ctx, scrambleKey) {\n        var _this = this;\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return __awaiter(_this, void 0, void 0, function () {\n                var _appAPIlock;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            _appAPIlock = this._appAPIlock;\n                            if (_appAPIlock) {\n                                return [2 /*return*/, Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"))];\n                            }\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, , 3, 4]);\n                            this._appAPIlock = methodName;\n                            this.setScrambleKey(scrambleKey);\n                            return [4 /*yield*/, f.apply(ctx, args)];\n                        case 2: return [2 /*return*/, _a.sent()];\n                        case 3:\n                            this._appAPIlock = null;\n                            return [7 /*endfinally*/];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n    };\n    Transport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n    Transport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n    return Transport;\n}());\nexport default Transport;\n//# sourceMappingURL=Transport.js.map"]},"metadata":{},"sourceType":"module"}