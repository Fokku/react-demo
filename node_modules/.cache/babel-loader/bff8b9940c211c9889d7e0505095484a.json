{"ast":null,"code":"var id = 0;\nvar subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\n\nexport var log = function (type, message, data) {\n  var obj = {\n    type: type,\n    id: String(++id),\n    date: new Date()\n  };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\n\nexport var listen = function (cb) {\n  subscribers.push(cb);\n  return function () {\n    var i = subscribers.indexOf(cb);\n\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log) {\n  for (var i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAcA,IAAI,EAAE,GAAG,CAAT;AACA,IAAM,WAAW,GAAiB,EAAlC;AAEA;;;;AAIG;;AACH,OAAO,IAAM,GAAG,GAAG,UAAC,IAAD,EAAe,OAAf,EAAiC,IAAjC,EAA2C;AAC5D,MAAM,GAAG,GAAQ;AACf,IAAA,IAAI,EAAA,IADW;AAEf,IAAA,EAAE,EAAE,MAAM,CAAC,EAAE,EAAH,CAFK;AAGf,IAAA,IAAI,EAAE,IAAI,IAAJ;AAHS,GAAjB;AAKA,MAAI,OAAJ,EAAa,GAAG,CAAC,OAAJ,GAAc,OAAd;AACb,MAAI,IAAJ,EAAU,GAAG,CAAC,IAAJ,GAAW,IAAX;AACV,EAAA,QAAQ,CAAC,GAAD,CAAR;AACD,CATM;AAWP;;;;AAIG;;AACH,OAAO,IAAM,MAAM,GAAG,UAAC,EAAD,EAAe;AACnC,EAAA,WAAW,CAAC,IAAZ,CAAiB,EAAjB;AACA,SAAO,YAAA;AACL,QAAM,CAAC,GAAG,WAAW,CAAC,OAAZ,CAAoB,EAApB,CAAV;;AAEA,QAAI,CAAC,KAAK,CAAC,CAAX,EAAc;AACZ;AACA,MAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAA5B;AACA,MAAA,WAAW,CAAC,GAAZ;AACD;AACF,GARD;AASD,CAXM;;AAaP,SAAS,QAAT,CAAkB,GAAlB,EAA0B;AACxB,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,QAAI;AACF,MAAA,WAAW,CAAC,CAAD,CAAX,CAAe,GAAf;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV,MAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACD;AACF;AACF;;AAUD,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,EAAA,MAAM,CAAC,kBAAP,GAA4B,MAA5B;AACD","sourceRoot":"","sourcesContent":["var id = 0;\nvar subscribers = [];\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport var log = function (type, message, data) {\n    var obj = {\n        type: type,\n        id: String(++id),\n        date: new Date()\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    dispatch(obj);\n};\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport var listen = function (cb) {\n    subscribers.push(cb);\n    return function () {\n        var i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for (var i = 0; i < subscribers.length; i++) {\n        try {\n            subscribers[i](log);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (typeof window !== \"undefined\") {\n    window.__ledgerLogsListen = listen;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}